<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Samraksh_SPOT_Hardware</name>
    </assembly>
    <members>
        <member name="T:Samraksh.SPOT.Hardware.Accelerometer">
            <summary>
            Adapt Accelerometer Interface class
            </summary>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.#ctor(System.Int32,Samraksh.SPOT.Hardware.Accelerometer.AxlCallbackType)">
            <summary>
            Initializes the i2c and the accelerometer sensor
            </summary>
            <param name="RefreshRate">controls the rate at which the driver samples the accelerometer</param>
            <param name="callbackfunction">user callback function, if null the user is not intimated of changes in sensor values and should use polling</param>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.Initialize">
            <summary>
            Initializes the accelerometer hardware
            </summary>
            <returns>The result of accelerometer initialization: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.Reset">
            <summary>
            Resets the accelerometer hardware
            </summary>
            <returns>The result of accelerometer reset: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.SelfTest">
            <summary>
            Runs the accelerometer self-test
            </summary>
            <returns>The result of accelerometer self-test: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.GetX">
            <summary>
            Gets the accelerometer X value
            </summary>
            <returns>The accelerometer X value (Int16)</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.GetY">
            <summary>
            Gets the accelerometer Y value
            </summary>
            <returns>The accelerometer Y value (Int16)</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.GetZ">
            <summary>
            Gets the accelerometer Z value
            </summary>
            <returns>The accelerometer Z value (Int16)</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.GetTemperature">
            <summary>
            Gets the accelerometer temperature
            </summary>
            <returns>The accelerometer temperature (Int16)</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.ReadRegister(System.Byte)">
            <summary>
            Reads a register
            </summary>
            <param name="reg">The register to be read.</param>
            <returns>The  register return value (Byte)</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.WriteRegister(System.Byte,System.Byte)">
            <summary>
            Writes a register
            </summary>
            <param name="reg">The register to be written.</param>
            <param name="data">The register value to be written.</param>
            <returns>The result of accelerometer register write: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.AdvancedConfig(System.UInt32)">
            <summary>
            Accelerometer advanced configuration
            </summary>
            <param name="config">The configuration to be used.</param>
            <returns>The result of accelerometer advanced configuration: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.SetPowerMode(System.UInt32)">
            <summary>
            Accelerometer set power
            </summary>
            <param name="power">The power to be used.</param>
            <returns>The result of accelerometer set power: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.SetBandwidth(System.UInt32)">
            <summary>
            Accelerometer set bandwidth
            </summary>
            <param name="bandwidth">The bandwidth to be used.</param>
            <returns>The result of accelerometer set bandwidth: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.SetRange(System.Byte)">
            <summary>
            Accelerometer set range
            </summary>
            <param name="range">The range to be used.</param>
            <returns>The result of accelerometer set range: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.Accelerometer.GetAllData(System.Int16[])">
            <summary>
            Get all three axis
            </summary>
            <param name="data">Array of size 3 passed to the driver to be filled.</param>
            <returns>The result of accelerometer get all: 0-Success, 1-Fail</returns>
        </member>
        <member name="P:Samraksh.SPOT.Hardware.Accelerometer.RefreshRate">
            <summary>
            Set the value of refresh rate 
            </summary>
        </member>
        <member name="P:Samraksh.SPOT.Hardware.Accelerometer.CurrentData">
            <summary>
            Get the current sampling value of the accelerometer
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.Accelerometer.Data.RawX">
            <summary>
            The raw x axis acceleration data 
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.Accelerometer.Data.RawY">
            <summary>
            The raw y axis acceleration data 
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.Accelerometer.Data.RawZ">
            <summary>
            The raw z axis acceleration data 
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.Accelerometer.GRange">
            <summary>
            Enum describing the GRange of the accelerometer   
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.Accelerometer.OutputResolution">
            <summary>
            Enum describing the output resolution of the accelerometer    
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.AdcCallBack">
            <summary>
            Defines a delegate for the continuous mode of the callback function
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput">
            <summary>
            AnalogInput class similar to Microsoft AnalogInput but with additional features
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.AdcInternal">
            <summary>
            Represents the adc internal class 
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.MyCallback">
            <summary>
            Represents the callback function
            </summary>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.InitializeADC">
            <summary>
            Initializes the adc dll 
            </summary>
            
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.InitChannel(Microsoft.SPOT.Hardware.Cpu.AnalogChannel)">
            <summary>
            Initializes the adc hardware based on channel passed
            </summary>
            <param name="channel">channel 1 or 2</param>
            <returns>Returns the result of the initialization operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.DualChannelRead(System.UInt16[])">
            <summary>
            Read both channel synchrnously
            </summary>
            <param name="data">array of size 2 bytes passed to the adc driver to be filled</param>
            <returns>Returns the result of this operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.Read(Microsoft.SPOT.Hardware.Cpu.AnalogChannel)">
            <summary>
            Read a single channel
            </summary>
            <param name="channel">Channel to be read</param>
            <returns>Returns the result of the read operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.ConfigureBatchModeDualChannel(System.UInt16[],System.UInt16[],System.UInt32,System.UInt32,Samraksh.SPOT.Hardware.EmoteDotNow.AdcCallBack)">
            <summary>
            Read the adc channels 1 and 2 in batch mode
            </summary>
            <param name="sampleBuff">Sample buffer to be filled</param>
            <param name="NumSamples">Number of samples before callback</param>
            <param name="SamplingTime">Sampling frequency</param>
            <param name="Callback">Callback funtion to be called</param>
            <returns></returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.ConfigureBatchMode(System.UInt16[],Microsoft.SPOT.Hardware.Cpu.AnalogChannel,System.UInt32,System.UInt32,Samraksh.SPOT.Hardware.EmoteDotNow.AdcCallBack)">
            <summary>
            Read the ADC in batch mode and collect the specified number of samples before stopping
            </summary>
            <param name="sampleBuff">Buffer passed to the driver to be filled</param>
            <param name="channel">Defne the channel to be read in batch mode</param>
            <param name="NumSamples">Defines the number of samples to be read</param>
            <param name="SamplingTime">Defines the sample time</param>
            <param name="Callback">Defines the callback to be called when the samples are ready</param>
            <returns></returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.ConfigureContinuousMode(System.UInt16[],Microsoft.SPOT.Hardware.Cpu.AnalogChannel,System.UInt32,System.UInt32,Samraksh.SPOT.Hardware.EmoteDotNow.AdcCallBack)">
            <summary>
            Read the adc in continous mode and keep generating samples of adc forever
            </summary>
            <param name="SampleBuff">Buffer passed to the driver</param>
            <param name="channel">Specify the channel to be scanned</param>
            <param name="NumSamples">Specify the number of samples to be read before callback</param>
            <param name="SamplingTime">Specifies the sampling time</param>
            <param name="Callback">Specify the callback function</param>
            <returns></returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.StopSampling">
            <summary>
            Used to stop sampling in either continuous or batch mode 
            </summary>
            <returns>Returns the result of this operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.AnalogInput.InternalCallback(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Internal Callback called by the adc driver from native
            </summary>
            <param name="data1">Parameter passed from native</param>
            <param name="data2"></param>
            <param name="time"></param>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.AdcSampleTime">
            <summary>
            Time taken to sample in the adc driver
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal">
            <summary>
            ADCInternal interface to the native driver
            </summary>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.#ctor(System.String,System.UInt64,System.Int32)">
            <summary>
            Specifies the driver name for matching with the native eventdispatcher
            </summary>
            <param name="strDrvName"></param>
            <param name="drvData"></param>
            <param name="callbackCount"></param>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.Init(System.Int32)">
            <summary>
            Initializes the adc native driver
            </summary>
            <param name="channel">Specify the channel to be sampled</param>
            <returns>Returns the result of the init function</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.Read(System.Int32)">
            <summary>
            Read the channel
            </summary>
            <param name="channel">Specify the channel to be read</param>
            <returns>Return the read value</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.ConfigureBatchMode(System.UInt16[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Configure the batch mode
            </summary>
            <param name="sampleBuff">Pass the buffer to be filled</param>
            <param name="channel">Define the channel to be read</param>
            <param name="NumSamples">Defines the number of samples to be read before callback</param>
            <param name="SamplingTime">Defines the rate at which the adc should read channels</param>
            <returns>Return the result of the operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.ConfigureContinuousMode(System.UInt16[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Configure the adc in continuous mode 
            </summary>
            <param name="SampleBuff">pass the buffer to be filled</param>
            <param name="channel">pass the channel to be sampled</param>
            <param name="NumSamples">specify the number of samples to be collected before callback</param>
            <param name="SamplingTime">specify the rate of sampling</param>
            <returns>Returns the result of this operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.ConfigureContinuousModeWithThresholding(System.UInt16[],System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Configure continuous mode adc sampling with a threshold timestamp 
            </summary>
            <param name="SampleBuff"></param>
            <param name="channel"></param>
            <param name="NumSamples"></param>
            <param name="SamplingTime"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.DualChannelRead(System.UInt16[])">
            <summary>
            Read both the channel simulateously Channel 1 followed by Channel 2
            </summary>
            <param name="sample">specify the buffer to be filled</param>
            <returns>Return the result of this operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.ADCInternal.StopSampling">
            <summary>
            Stop batch mode and continous mode sampling of the adc 
            </summary>
            <returns>Returns the result of this operation</returns>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.AdcCallBack">
            <summary>
            Defines a delegate for the continuous mode of the callback function
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.AnalogInput">
            <summary>
            AnalogInput class similar to Microsoft AnalogInput but with additional features
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.AnalogInput.MyCallback">
            <summary>
            Represents the callback function
            </summary>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.AnalogInput.Initialize">
            <summary>
            Initializes the accelerometer hardware
            </summary>
            <returns>The result of accelerometer initialization: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.AnalogInput.Read(System.Int32)">
            <summary>
            Read one sample from the channel
            </summary>
            <param name="channel">Specify the channel to be read</param>
            <returns>Returns the read value</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.AnalogInput.ReadBatch(System.UInt16[],System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Read batch mode
            </summary>
            <param name="sampleBuff">The buffer to be filled</param>
            <param name="channel">Define the channel to be read</param>
            <param name="NumSamples">Defines the number of samples to be read</param>
            <param name="SamplingTime">Defines the rate at which the adc should read channels</param>
            <returns>Returns the result of the operation: 0-Success, 1-Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.AnalogInput.GetMaxSampleRate">
            <summary>
            Get the sample rate maximum of the ADC
            </summary>
            <returns>Returns the maximum sample rate of the ADC.</returns>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.AdcSampleTime">
            <summary>
            Time taken to sample in the adc driver
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.DeviceStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.DeviceStatus.Fail">
            <summary>
            Fail
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.DeviceStatus.Ready">
            <summary>
            Ready
            </summary>
        </member>
        <member name="F:Samraksh.SPOT.Hardware.DeviceStatus.Busy">
            <summary>
            Busy 
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.FPGA">
            <summary>
            Adapt FPGA Interface class
            </summary>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.FPGA.Initialize">
            <summary>
            Initializes the FPGA hardware
            </summary>
            <returns>The result of FPGA initialization: 0-Success, 1-Fail</returns>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.Blink">
            <summary>
            LCD blink rate
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.LCD">
            <summary>
            LCD char enum
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD">
            <summary>
            Emote LCD Interface class
            </summary>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.Initialize">
            <summary>
            Initializes the lcd hardware
            </summary>
            <returns>The result of lcd initialization: Success, Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.Uninitialize">
            <summary>
            Uninitializes the lcd hardware
            </summary>
            <returns>The result of lcd uninitialize: Success, Fail</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.Write(Samraksh.SPOT.Hardware.EmoteDotNow.LCD,Samraksh.SPOT.Hardware.EmoteDotNow.LCD,Samraksh.SPOT.Hardware.EmoteDotNow.LCD,Samraksh.SPOT.Hardware.EmoteDotNow.LCD)">
            <summary>
            Write to all columns of the lcd interface 
            </summary>
            <param name="data4">Columns 4</param>
            <param name="data3">Columns 3</param>
            <param name="data2">Columns 2</param>
            <param name="data1">Columns 1</param>
            <returns>The result of the write operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.SetDP(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the decimal point
            </summary>
            <param name="dp1">Columns 1</param>
            <param name="dp2">Columns 2</param>
            <param name="dp3">Columns 3</param>
            <param name="dp4">Columns 4</param>
            <returns>The result ofthe write operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.WriteN(System.Int32,Samraksh.SPOT.Hardware.EmoteDotNow.LCD)">
            <summary>
            Writes to the specified column on the lcd 
            </summary>
            <param name="column">Specifies the column on the lcd hardware</param>
            <param name="data">Sepcifies the characted to be printed</param>
            <returns>The result of the write operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.WriteRawBytes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Write raw data to the lcd instead of characters
            </summary>
            <param name="data4">Column 4</param>
            <param name="data3">Column 3</param>
            <param name="data2">Column 2</param>
            <param name="data1">Column 1</param>
            <returns>Return the result of the write operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.Blink(Samraksh.SPOT.Hardware.EmoteDotNow.Blink)">
            <summary>
            Set the lcd to blink
            </summary>
            <param name="blinkType">Defines the rate of the blink</param>
            <returns>Returns the result of the blink operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.EmoteLCD.Clear">
            <summary>
            Clear the lcd 
            </summary>
            <returns>Returns the result of the clear operation</returns>
        </member>
        <member name="M:Samraksh.SPOT.Hardware.EmoteDotNow.NOR.Initialize">
            <summary>
            Initialize the nor flash
            </summary>
            <returns></returns>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.Pins">
            <summary>
            Screw termial pin mapping
            </summary>
        </member>
        <member name="T:Samraksh.SPOT.Hardware.EmoteDotNow.ADCChannel">
            <summary>
            Emote ADC channel mapping
            </summary>
        </member>
    </members>
</doc>
